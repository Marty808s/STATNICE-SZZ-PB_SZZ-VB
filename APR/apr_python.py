# -*- coding: utf-8 -*-
"""APR_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A2QZ7EXpqCl4H_FGZqG20rOv8VBa-m8T

APR1

https://physics.ujep.cz/~jskvor/SZZ/BcAPI/SZZPP/APR-I-II-3okruhy.pdf

Obecná charakteristika zkušební úlohy

1. najít chybu/chyby v poskytnutém kódu v jazyce Python a opravit ji
2. podle zadání rozšířit funkčnost či poskytnout alternativní funkčnost
"""

from logging import exception

def test_of_parantheses(text: str, parent_type: tuple) -> bool:
  """
  Testuje, zda jsou kulaté závorky správně uzávorkované.
  Příklad chybného uzávorkování: ")(())("
  """
  indent = []
  para_count = 0
  byl_otevren = False
  hloubka = 0
  if text == "":
    raise ValueError("Mám prázdný string")
  for c in text:
    if c in parent_type[0]:
      if not byl_otevren and para_count != 0:
        raise ValueError("Výraz je špatně uzavórkován")
      para_count += 1
      hloubka += 1
      byl_otevren = True
    elif c == parent_type[1]:
      byl_otevren = False
      indent.append(hloubka)
      hloubka = 0
      para_count -= 1
  if para_count != 0:
    raise ValueError("Výraz je špatně uzavórkován")
  indent = sorted(indent)
  return (para_count == 0, para_count, indent[-1])

#count = test_of_parantheses("((asd))")
is_equal, count, indent = test_of_parantheses("(()))(((())))", ("(",")"))
print(is_equal, count, indent)

# kód má ke každé položce modifikovatelné sekvence s celočíselnými prvky
# přičíst 1 je-li položka sudá
#data = list(range(1, 10))
data = [2,2,'A']
nova_data = []
print(data)
if not isinstance(data,list):
  raise TypeError("Hodnota není seznam")
for item in data:
  if not isinstance(item,int):
    raise TypeError("Hodnota není celočíselná")
  a = item
  if a % 2 == 0:
    a+=1
    nova_data.append(a)
  else:
    nova_data.append(a)

print(data)
print(nova_data)

class Semaphore:
  colors = ["red", "yellow", "green"]
  def __init__(self,color:str):
    if color not in self.colors:
      raise ValueError("Zadaná barva není v seznamu")
    self.color = color
    self.stop = False if color == "green" else True

  def __str__(self):
    return self.color

  def nextColor(self):
    """
    vrací semafor s následující barvou v sekvenci přepínání světel
    """


    if self.color != 'green':
      self.color = self.colors[self.colors.index(self.color)+1]
    else:
      self.color='red'
    self.stop = False if self.color == "green" else True
    return self.color

  def __eq__(self, o: object) -> bool:
    if not isinstance(o, Semaphore):
      raise TypeError("Hodnota není Semaphore")
    return self.color == o.color

class NewGenSemaphore(Semaphore):
  def __init__(self, color: str):
    super().__init__(color)

  def nextColor(self):
    """
    vrací semafor s následující barvou v sekvenci přepínání světel
    """

    if self.color != 'green':
      self.color = self.colors[self.colors.index(self.color)+2]
    else:
      self.color='red'
    self.stop = False if self.color == "green" else True
    return self.color

semafor = Semaphore("red")
semafor2 = NewGenSemaphore("red")
a = 'A'

#print(f"{semafor==a}")
print(semafor.stop)

print(semafor2)
semafor2.nextColor()
print(semafor2)
print(semafor2.stop)